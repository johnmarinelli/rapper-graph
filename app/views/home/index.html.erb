<head>

<style>
.chart div{
  font: 10px sans-serif;
  background-color: steelblue;
  text-align: right;
  padding: 3px;
  margin: 1px;
  color: white;
}

.axis path,
.axis line{
  fill: none;
  stroke: black;
  shape-rendering: crispEdges;
}

.axis text{
  font-family: sans-serif;
  font-size: 11px;
}
</style>

</head>
<body>
  <h1>Home#index</h1>
  <p>Rappers and stuff.</p>

  <% @rappers.each do |rapper| %>
    <%= rapper.name %> <%= rapper.year %><br/>
  <% end %>

  <div class="chart">
  </div>
<script>
<% @rappers.each do |rapper| %>
  var r = JSON.parse('<%= j(rapper.to_json).html_safe %>');
  var rapper = new Rapper(r.name, r.year);
  
  if(r.beef){
    var beefList = getElementsFromString(r.beef, ',');
    for(var b in beefList){
      rapper.setBeef(beefList[b]);
    }
  }

  if(r.influenced){
    var influenceList = getElementsFromString(r.influenced, ',');
    for(var i in influenceList){
      rapper.setInfluenced(influenceList[i]);
    }
  }

  if(r.collaborated){
    var collabList = getElementsFromString(r.collaborated, ',');
    for(var c in collabList){
      rapper.setCollaborated(collabList[c]);
    }
  }

  rapper.setPresence();

  rapperArray.push(rapper);
<% end %>
</script>

<script src="http://code.jquery.com/jquery-2.1.1.min.js"></script>
<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
<script>
/*
* takes in an object with x, y, radius member variables
*/
function drawLines(coords1, coords2, color='blue'){
  var end = getClosestPoint(coords1, coords2);
  var start = getClosestPoint(coords2, coords1);
console.log(coords1.x + ', ' + coords1.y + '-----' + coords2.x + ', ' + coords2.y);
console.log(start.x + ', ' + start.y + '-----' + end.x + ', ' + end.y);

  var lineData = [ [start.x, start.y],
 				   [end.x, end.y] ];

  var lineFunction = d3.svg.line()
						   .x(function(d){
						   	    return d[0];
						     })
						   .y(function(d){
						 	    return d[1];
						     })
						   .interpolate("linear");

  var lines = svg.append("path")
			     .attr("d", lineFunction(lineData))
			     .attr("stroke", color)
			     .attr("stroke-width", 2)
			     .attr("fill", "none")
				 .attr("class", "path");

  return lines;
}

function drawMarkers(lines){
  svg.append("defs").append("marker")
  					.attr("id", "arrowhead")
					.attr("refX", 9)
					.attr("refY", 2)
					.attr("markerWidth", 6)
					.attr("markerHeight", 4)
					.attr("orient", "auto")
					.attr("fill", lines.attr("stroke"))
					.attr("class", "marker")
					.append("path")
					  .attr("d", "M 0, 0 V 4 L6, 2 Z");

  $(".path").css("marker-end", "url(#arrowhead");
}

</script>
<script>
var maxAvatarRadius =  25;
var width = 500;
var height = 500;

var svg = d3.select("body")
			.append("svg")
			.attr("width", width + "px")
			.attr("height", height + "px");

var circles = svg.selectAll("circle")
			     .data(rapperArray)
			     .enter()
   			     .append("circle");
  
var xDomain = getExtremes('mYear');
var xScale = d3.scale.linear()
					 .domain([xDomain[0], xDomain[1]])
					 .range([maxAvatarRadius, width - maxAvatarRadius]);
var xAxis = d3.svg.axis()
				  .scale(xScale)
				  .orient("bottom")
				  .ticks(5);
svg.append("g")
   .attr("class", "axis")
   .attr("transform", "translate(0," + (height - maxAvatarRadius) + ")")
   .call(xAxis);

var yDomain = getExtremes('mPresence');
var yScale = d3.scale.linear()
					 .domain([yDomain[0], yDomain[1]])
					 .range([maxAvatarRadius, height - maxAvatarRadius]);

var rDomain = getExtremes('mPresence');
var rScale = d3.scale.linear()
					 .domain([rDomain[0], rDomain[1]])
					 .range([maxAvatarRadius * .25, maxAvatarRadius]);

//'d' is the actual data, 'i' is the index
//cx: function of year
//cy: random; make sure it doesn't overlap w/ other nodes
//    or, could be a function of presence score like 'r'
//	  lower on graph means lower presence
//r:  function of presence score that's calculated using influenced, beef, and collaborated attributes
circles.attr("cx", function(d, i){
			  d.mCoords.x = xScale(d.mYear);
			  return d.mCoords.x;
			})
	   .attr("cy", function(d, i){
	   		  d.mCoords.y = yScale(d.mPresence);
	   		  return d.mCoords.y;
			})
	   .attr("r", function(d, i){
	   		  d.mCoords.radius = rScale(d.mPresence);
	   		  return d.mCoords.radius;
	   		})
	   .attr("id", function(d){
	   		  return d.mName;
			})
	   .attr("class", "rapper");

//many-to-many relationship lines
for(var i in rapperArray){
  var rapper = rapperArray[i];
  for(var b in rapper.mBeef){
    var beef = getRapperFromName(rapper.mBeef[b]);
	rapper.mPaths.beef = drawLines(rapper.mCoords, beef.mCoords, 'red');
    drawMarkers(rapper.mPaths.beef);
  }
  for(var inf in rapper.mInfluenced){
    var influenced = getRapperFromName(rapper.mInfluenced[inf]);
    //drawLines(rapper.mCoords.x, rapper.mCoords.y, influenced.mCoords.x, influenced.mCoords.y, 'green');
  }
  for(var col in rapper.mCollaborated){
    var collab  = getRapperFromName(rapper.mCollaborated[col]);
    //drawLines(rapper.mCoords.x, rapper.mCoords.y, collab.mCoords.x, collab.mCoords.y, 'blue');
  }
}

function setOriginalColors(){

}

$(".rapper").hover(
  function(){
	var rapper = getRapperFromName($(this).attr("id"));
	if(rapper != undefined){
	  d3.selectAll("path.path").each(function(){
	    this.originalColor = d3.select(this).attr("stroke");
	  });
	  d3.selectAll("marker.marker").each(function(){
	    this.originalColor = d3.select(this).attr("fill");
	  });
	  d3.selectAll("circle.rapper").each(function(){
	    this.originalColor = d3.select(this).attr("fill");
	  });

      d3.selectAll("path.path").attr("stroke", "gray");
	  $(this).attr("fill", "orange");
	  rapper.mPaths.beef.attr("stroke", "orange");
	}
  }, 
  function(){
	var rapper = getRapperFromName($(this).attr("id"));
	if(rapper != undefined){
	  d3.selectAll("path.path").each(function(){
	    d3.select(this).attr("stroke", this.originalColor);
	  });

	  $(this).attr("fill", "initial");
	  rapper.mPaths.beef.attr("stroke", "red");
	}
  }
);

</script>
</body>
